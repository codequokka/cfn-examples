---
AWSTemplateFormatVersion: 2010-09-09

Description: Create IAM policies, groups, roles, users, instance profiles.

Parameters:
  DefaultUserPassword:
    Type: String
    NoEcho: true

Resources:
  #-----------------------------------------------------------------------------
  # Policies
  #-----------------------------------------------------------------------------
  SetOwnCredentialsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: SetOwnCredentialsPolicy
      Description: Policy to set own credentials(password, MFA, etc).
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:ChangePassword
              - iam:CreateAccessKey
              - iam:CreateVirtualMFADevice
              - iam:DeactivateMFADevice
              - iam:DeleteAccessKey
              - iam:DeleteVirtualMFADevice
              - iam:EnableMFADevice
              - iam:GetAccountPasswordPolicy
              - iam:UpdateAccessKey
              - iam:UpdateSigningCertificate
              - iam:UploadSigningCertificate
              - iam:UpdateLoginProfile
              - iam:ResyncMFADevice
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/${!aws:username}
              - !Sub arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}
          # - Effect: Allow
          #   Action:
          #     - iam:Get*
          #     - iam:List*
          #   Resource: "*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  ForceMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: ForceMFAPolicy
      Description: Policy to deny all actions without IAM if MFA is not activated.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            NotAction: iam:*
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: false
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  #-----------------------------------------------------------------------------
  # Groups
  #-----------------------------------------------------------------------------
  # For All users.
  AllGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: AllGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - !Ref SetOwnCredentialsPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  # For Administrator users.
  AdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: AdminGroup
      ManagedPolicyArns:
        - !Ref ForceMFAPolicy
      Policies:
        - PolicyName: AssumeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !GetAtt AdminRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  #-----------------------------------------------------------------------------
  # Roles
  #-----------------------------------------------------------------------------
  # For Administrator users.
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AdminRole
      Description: Role for Administrator users
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      MaxSessionDuration: 43200
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending
          - id: W43
            reason: This role can be only used by specified user with MFA is activated

  # For EC2 instances.
  EC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2SSMRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Pending

  #-----------------------------------------------------------------------------
  # Users
  #-----------------------------------------------------------------------------
  # Administrator user.
  Admin01:
    Type: AWS::IAM::User
    Properties:
      UserName: admin01
      LoginProfile:
        Password: !Ref DefaultUserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref AllGroup
        - !Ref AdminGroup

  #-----------------------------------------------------------------------------
  # Access keys, Access key secrets
  #-----------------------------------------------------------------------------
  # Access key for admin01 user.
  # Admin01AccessKey:
  #   Type: AWS::IAM::AccessKey
  #   Properties:
  #     UserName: !Ref Admin01

  # Access key secret for admin01 user.
  # Admin01AccessKeySecret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties:
  #     Name: !Sub ${Admin01}-credentials
  #     SecretString: !Sub '{"accessKeyId":"${Admin01AccessKey}","secretAccessKey":"${Admin01AccessKey.SecretAccessKey}"}'
  #   Metadata:
  #     cfn_nag:
  #       rules_to_suppress:
  #         - id: W77
  #           reason: Pending

  #-----------------------------------------------------------------------------
  # Instance profiles
  #-----------------------------------------------------------------------------
  # For Web01 EC2 instance.
  Web01EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2SSMRole
      InstanceProfileName: Web01EC2InstanceProfile

Outputs:
  Web01EC2InstanceProfile:
    Value: !Ref Web01EC2InstanceProfile
    Export:
      Name: Web01EC2InstanceProfile
